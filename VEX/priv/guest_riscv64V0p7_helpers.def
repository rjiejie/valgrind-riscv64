
/*---------------------------------------------------------------*/
/*--- OPI function definitions                                ---*/
/*---------------------------------------------------------------*/

RVV_FT_DEF(vadd,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsub,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vrsub,  NIL,         BinopOPIVX,  BinopOPIVI)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push   RVV_PushWCfg
#define RVV_Pop    RVV_PopCfg
RVV_FT_DEF(vwaddu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwaddu, BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwsubu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwsubu, BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwadd,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwadd,  BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwsub,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwsub,  BinopOPIWV, BinopOPIWX, NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FT_DEF(vadc,   BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)
RVV_FT_DEF(vmadc,  BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)
RVV_FT_DEF(vsbc,   BinopOPIVVM, BinopOPIVXM, NIL)
RVV_FT_DEF(vmsbc,  BinopOPIVVM, BinopOPIVXM, NIL)

RVV_FT_DEF(vand,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vor,    BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vxor,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsll,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsrl,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsra,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push   RVV_PushWCfg
#define RVV_Pop    RVV_PopCfg
RVV_FT_DEF(vnsrl,  BinopOPIVV, BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vnsra,  BinopOPIVV, BinopOPIVX, BinopOPIVI)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push   RVV_PushCfg
#define RVV_Pop    RVV_PopCfg
RVV_FT_DEF(vmseq,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsne,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsleu, BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsle,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsltu, BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmslt,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmsgtu, NIL,         BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsgt,  NIL,         BinopOPIVX,  BinopOPIVI)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FT_DEF(vminu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmin,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmaxu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmax,   BinopOPIVV,  BinopOPIVX,  NIL)

RVV_FT_DEF(vmul,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulh,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulhu, BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulhsu,BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vdivu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vdiv,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vremu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vrem,   BinopOPIVV,  BinopOPIVX,  NIL)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push   RVV_PushWCfg
#define RVV_Pop    RVV_PopCfg
RVV_FT_DEF(vwmul,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwmulu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwmulsu,BinopOPIVV, BinopOPIVX, NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FT_DEF(vmacc,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vnmsac, BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vmadd,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vnmsub, BinopOPIVV2, BinopOPIVX2, NIL)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushWCfg
#define RVV_Pop      RVV_PopCfg
RVV_FT_DEF(vwmaccu,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmacc,   BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmaccsu, BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmaccus, NIL,         BinopOPIVX2, NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FT_DEF(vmerge, BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push       RVV_PushCfg
#define RVV_Pop        RVV_PopCfg
RVV_FT_DEF(vslideup,   NIL,         BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vslidedown, NIL,         BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vslide1up,  NIL,         BinopOPIVX, NIL)
RVV_FT_DEF(vslide1down,NIL,         BinopOPIVX, NIL)
RVV_FT_DEF(vrgather,   BinopOPIVV,  BinopOPIVX, BinopOPIVI)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FT_DEF(vredsum,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmaxu,  BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmax,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredminu,  BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmin,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredand,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredor,    BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredxor,   BinopOPIVS,   NIL, NIL)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push      RVV_PushCfg
#define RVV_Pop       RVV_PopCfg
RVV_FT_DEF(vwredsumu, BinopOPIVS, NIL, NIL)
RVV_FT_DEF(vwredsum,  BinopOPIVS, NIL, NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma push_macro("RVV_Pre")
#pragma push_macro("RVV_Post")
#undef  RVV_Pre
#undef  RVV_Post
#define RVV_Pre      RVV_PushXSAT
#define RVV_Post     RVV_PopXSAT

RVV_FT_DEF(vsaddu,  BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vsadd,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vssubu,  BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vssub,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vaadd,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vasub,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vsmul,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vssrl,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vssra,   BinopSATVV,  BinopSATVX,  BinopSATVI)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push      RVV_PushWCfg
#define RVV_Pop       RVV_PopCfg
RVV_FT_DEF(vwsmaccu,  BinopSATVV2,  BinopSATVX2,  NIL)
RVV_FT_DEF(vwsmacc,   BinopSATVV2,  BinopSATVX2,  NIL)
RVV_FT_DEF(vwsmaccsu, BinopSATVV2,  BinopSATVX2,  NIL)
RVV_FT_DEF(vwsmaccus, NIL,          BinopSATVX2,  NIL)
RVV_FT_DEF(vnclipu,   BinopSATVV,   BinopSATVX,   BinopSATVI)
RVV_FT_DEF(vnclip,    BinopSATVV,   BinopSATVX,   BinopSATVI)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma pop_macro("RVV_Pre")
#pragma pop_macro("RVV_Post")

#pragma push_macro("RVV_BinopVV_M")
#undef  RVV_BinopVV_M
#define RVV_BinopVV_M RVV_BinopVV
RVV_FT_DEF(vmand,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmnand,   BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmandnot, BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmxor,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmor,     BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmnor,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmornot,  BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmxnor,   BinopOPIMM, NIL, NIL)
#pragma pop_macro("RVV_BinopVV_M")

#pragma push_macro("VInsnVV")
#pragma push_macro("RVV_BinopVV_M")
#undef  VInsnVV
#undef  RVV_BinopVV_M
#define VInsnVV(insn) #insn
#define RVV_BinopVV_M RVV_BinopVV
RVV_BinopOPI_FT_VAR_T(vcompress, vcompress.vm, VV, VV)
#pragma pop_macro("VInsnVV")
#pragma pop_macro("RVV_BinopVV_M")

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushCfg
#define RVV_Pop      RVV_PopCfg
RVV_FT_DEF(vmsbf,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(vmsif,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(vmsof,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(viota,    UnopOPIM, NIL, NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma push_macro("RVV_UnopV_M")
#undef  RVV_UnopV_M
#define RVV_UnopV_M RVV_UnopV
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, V, V)
#pragma pop_macro("RVV_UnopV_M")
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, X, X)
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, I, I)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushCfg
#define RVV_Pop      RVV_PopCfg
RVV_UnopOPI_FT_VAR_T(vmvs, vmv.s, X, X)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma push_macro("RVV_WholeST")
#undef  RVV_WholeST
#define RVV_WholeST
RVV_UnopOPI_FT_VAR(vmpopc, M, V3)
RVV_UnopOPI_FT_VAR(vmfirst, M, V3)

#pragma push_macro("VInsnVX")
#undef  VInsnVX
#define VInsnVX(insn) #insn
RVV_BinopOPI_FT_VAR_T(vext, vext.x.v, VX, VX3)
#pragma pop_macro("VInsnVX")

#pragma push_macro("RVV_BinopXIF_iTpl3")
#undef  RVV_BinopXIF_iTpl3
#define RVV_BinopXIF_iTpl3(insn, treg, mreg)\
   (void)vstart;\
   __asm__ __volatile__(insn "\tft0,v16" treg mreg "\n\t"   \
                        "fmv.x.d\t%0,ft0\n\t"               \
                        :"=r"(ret)::"ft0");
#pragma push_macro("VInsnV")
#pragma push_macro("RVV_UnopV3_M")
#undef  VInsnV
#undef  RVV_UnopV3_M
#define VInsnV(insn) #insn
#define RVV_UnopV3_M RVV_UnopV3
RVV_UnopOPF_FT_VAR_T(vfmv, vfmv.f.s, V, V3)
#pragma pop_macro("VInsnV")
#pragma pop_macro("RVV_UnopV3_M")
#pragma pop_macro("RVV_BinopXIF_iTpl3")

#pragma pop_macro("RVV_WholeST")

/*---------------------------------------------------------------*/
/*--- OPF function definitions                                ---*/
/*---------------------------------------------------------------*/

#define RVV_FFT_DEF(insn, vv, vf) RVV_FT_DEF(insn, vv, vf, NIL)

#pragma push_macro("RVV_Pre")
#pragma push_macro("RVV_Post")
#undef  RVV_Pre
#undef  RVV_Post
#define RVV_Pre      RVV_PushFCSR
#define RVV_Post     RVV_PopFCSR

RVV_FFT_DEF(vfadd,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsub,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfrsub,  NIL,         BinopOPFVF)
RVV_FFT_DEF(vfmul,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfdiv,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfrdiv,  NIL,         BinopOPFVF)
RVV_FFT_DEF(vfmin,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfmax,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnj,  BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnjn, BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnjx, BinopOPFVV,  BinopOPFVF)

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushWCfg
#define RVV_Pop      RVV_PopCfg
RVV_FFT_DEF(vfwadd,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwsub,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwmul,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwadd,  BinopOPFWV, BinopOPFWF)
RVV_FFT_DEF(vfwsub,  BinopOPFWV, BinopOPFWF)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FFT_DEF(vfmacc,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmacc, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmsac,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmsac, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmadd,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmadd, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmsub,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmsub, BinopOPFVV2, BinopOPFVF2)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushWCfg
#define RVV_Pop      RVV_PopCfg
RVV_FFT_DEF(vfwmacc, BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwnmacc,BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwmsac, BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwnmsac,BinopOPFVV2,BinopOPFVF2)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushCfg
#define RVV_Pop      RVV_PopCfg
RVV_FFT_DEF(vmfeq,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfne,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmflt,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfle,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmford,  BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfgt,   NIL,         BinopOPFVF)
RVV_FFT_DEF(vmfge,   NIL,         BinopOPFVF)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_FFT_DEF(vfredosum,  BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredsum,   BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredmax,   BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredmin,   BinopOPFVS,    NIL)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushCfg
#define RVV_Pop      RVV_PopCfg
RVV_FFT_DEF(vfwredosum, BinopOPFVS,  NIL)
RVV_FFT_DEF(vfwredsum,  BinopOPFVS,  NIL)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_UnopOPFV_FT(vfsqrt,       vfsqrt)
RVV_UnopOPFV_FT(vfclass,      vfclass)
RVV_UnopOPFV_FT(vfcvt_xu_f,   vfcvt.xu.f)
RVV_UnopOPFV_FT(vfcvt_x_f,    vfcvt.x.f)
RVV_UnopOPFV_FT(vfcvt_f_xu,   vfcvt.f.xu)
RVV_UnopOPFV_FT(vfcvt_f_x,    vfcvt.f.x)
#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushWCfg
#define RVV_Pop      RVV_PopCfg
RVV_UnopOPFV_FT(vfwcvt_xu_f, vfwcvt.xu.f)
RVV_UnopOPFV_FT(vfwcvt_x_f,  vfwcvt.x.f)
RVV_UnopOPFV_FT(vfwcvt_f_xu, vfwcvt.f.xu)
RVV_UnopOPFV_FT(vfwcvt_f_x,  vfwcvt.f.x)
RVV_UnopOPFV_FT(vfwcvt_f_f,  vfwcvt.f.f)
RVV_UnopOPFV_FT(vfncvt_xu_f, vfncvt.xu.f)
RVV_UnopOPFV_FT(vfncvt_x_f,  vfncvt.x.f)
RVV_UnopOPFV_FT(vfncvt_f_xu, vfncvt.f.xu)
RVV_UnopOPFV_FT(vfncvt_f_x,  vfncvt.f.x)
RVV_UnopOPFV_FT(vfncvt_f_f,  vfncvt.f.f)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

RVV_UnopOPF_FT_VAR_T(vfmerge, vfmv.v, F, F)

#pragma push_macro("VInsnVF")
#undef  VInsnVF
#define VInsnVF(insn) #insn
RVV_BinopOPF_FT_VAR_T(vfmerge, vfmerge.vfm, VF, VFM)
#pragma pop_macro("VInsnVF")

#pragma push_macro("RVV_Push")
#pragma push_macro("RVV_Pop")
#undef  RVV_Push
#undef  RVV_Pop
#define RVV_Push     RVV_PushCfg
#define RVV_Pop      RVV_PopCfg
RVV_UnopOPF_FT_VAR_T(vfmvs, vfmv.s, F, F)
#pragma pop_macro("RVV_Push")
#pragma pop_macro("RVV_Pop")

/* Change name space from RVV to RVV0p7 */
#undef  HELPER_NAME
#define HELPER_NAME(insn, vm)  RVV0p7_VLdst_##insn##vm

#pragma push_macro("RVV_Load_GuestState")
#pragma push_macro("RVV_Store_GuestState")
#pragma push_macro("RVV_Load_Memory")
#pragma push_macro("RVV_Store_Memory")

#undef  RVV_Load_Memory
#undef  RVV_Store_GuestState
#define RVV_Load_Memory       RVV_Unit_Stride_Load_Store_Memory
#define RVV_Store_GuestState  RVV_USX_Store_GuestState
RVV_VLdst(vlb,  vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vlh,  vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vlw,  vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vlbu, vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vlhu, vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vlwu, vse, DIRTY_VLOAD_BODY)
RVV_VLdst(vle,  vse, DIRTY_VLOAD_BODY)

#undef  RVV_Load_GuestState
#undef  RVV_Store_Memory
#define RVV_Load_GuestState  RVV_USX_Load_GuestState
#define RVV_Store_Memory     RVV_Unit_Stride_Load_Store_Memory
RVV_VLdst(vsb, vle, DIRTY_VSTORE_BODY)
RVV_VLdst(vsh, vle, DIRTY_VSTORE_BODY)
RVV_VLdst(vsw, vle, DIRTY_VSTORE_BODY)
RVV_VLdst(vse, vle, DIRTY_VSTORE_BODY)

#undef  RVV_Load_Memory
#define RVV_Load_Memory     RVV_Strided_Load_Store_Memory
RVV_VSXLdst(vlsb,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlsh,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlsw,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlse,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlsbu, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlshu, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlswu, vse, DIRTY_VLOAD_BODY)

#undef  RVV_Store_Memory
#define RVV_Store_Memory    RVV_Strided_Load_Store_Memory
RVV_VSXLdst(vssb, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vssh, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vssw, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsse, vle, DIRTY_VSTORE_BODY)

#define RVV0p7_Indexed_Load_Store_Memory(insn, vm) \
RVV_Indexed_Load_Store_Memory(insn, vle, vm)

#undef  RVV_Load_Memory
#define RVV_Load_Memory     RVV0p7_Indexed_Load_Store_Memory
RVV_VSXLdst(vlxb,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxh,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxw,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxe,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxbu, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxhu, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlxwu, vse, DIRTY_VLOAD_BODY)

#undef  RVV_Store_Memory
#define RVV_Store_Memory    RVV0p7_Indexed_Load_Store_Memory
RVV_VSXLdst(vsxb,  vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsuxb, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsxh,  vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsuxh, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsxw,  vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsuxw, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsxe,  vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsuxe, vle, DIRTY_VSTORE_BODY)

/* Load/store vector registers and update the address
   for accessing virtual guest state in the next step
   to the correct location. */
#define LDST_VEC_UPDATE_ADDR(insn, v_reg, vm) \
   __asm__ __volatile__(                      \
      #insn ".v\tv" #v_reg ",(%0)" vm "\n\t"  \
      "sub\t%0,%1,%2\n\t"                     \
      :"=r"(v_end)                            \
      :"0"(v_end), "r"(reg_len):              \
   );                                         \
   __attribute__ ((fallthrough));

/* Load/store guest state
   Segment load/store guest state should take both nf and
   lmul into account, making it more complicated than normal
   load/store. We achieve guest state load/store by iterating
   all virtual registers that a segment instruction touches.

   We split vector registers by lmul using the outmost switch,
   and further determine how many register groups to load/store
   by nf using the nested switch. For example, in the condition
   of LMUL=2 and NF=3 in a seg load, there are 6 registers accessed
   in a single instruction. Accordingly, we fall into the lmul
   case 1, and nf case 3, where the memory contents will be stored
   to vCPU registers from v13(v12), v11(v10), and v9(v8) by falling
   through case 3 to case 1.
*/
#define RVV0p7_Seg_LoadStore_GuestState(insn, nf, vm, v) \
                                                         \
   ULong lmul = 0;                                       \
   __asm__ __volatile__(                                 \
      "csrr\t%0,vtype\n\t"                               \
      "andi\t%0,%0,0x03\n\t"                             \
   :"=r"(lmul)::);                                       \
                                                         \
   lmul = 1 << lmul;                                     \
   ULong reg_len = host_VLENB * lmul;                    \
   ULong v_end   = v##_offs + (nf - 1) * reg_len;        \
                                                         \
   switch (lmul) {                                       \
      case 1: {                                          \
         /* LMUL = 1 */                                  \
         switch (nf) {                                   \
            case 8:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 15, vm)        \
            case 7:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 14, vm)        \
            case 6:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 13, vm)        \
            case 5:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 12, vm)        \
            case 4:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 11, vm)        \
            case 3:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 10, vm)        \
            case 2:                                      \
               LDST_VEC_UPDATE_ADDR(insn,  9, vm)        \
            case 1:                                      \
               LDST_VEC_UPDATE_ADDR(insn,  8, vm)        \
            default:                                     \
               break;                                    \
        }                                                \
        break;                                           \
      }                                                  \
      case 2: {                                          \
         /* LMUL = 2 */                                  \
         switch (nf) {                                   \
            case 4:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 14, vm)        \
            case 3:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 12, vm)        \
            case 2:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 10, vm)        \
            case 1:                                      \
               LDST_VEC_UPDATE_ADDR(insn,  8, vm)        \
            default:                                     \
               break;                                    \
        }                                                \
        break;                                           \
      }                                                  \
      case 4: {                                          \
         /* LMUL = 4 */                                  \
         switch (nf) {                                   \
            case 2:                                      \
               LDST_VEC_UPDATE_ADDR(insn, 12, vm)        \
            case 1:                                      \
               LDST_VEC_UPDATE_ADDR(insn,  8, vm)        \
            default:                                     \
               break;                                    \
         }                                               \
         break;                                          \
      }                                                  \
      case 8: {                                          \
         /* LMUL = 8 */                                  \
         __asm__ __volatile__(                           \
            #insn ".v\tv8,(%0)" vm "\n\t"                \
         ::"r"(v_end):);                                 \
         break;                                          \
      }                                                  \
      default:                                           \
         break;                                          \
   }

#define RVV0p7_Seg_PreLoad_Init                          \
   /* Initialize host vec regs using guest vec regs. */  \
   /* Use maximal available bytes. */                    \
   ULong tailing_bytes = mask + (host_VLENB << 5) - v;   \
   __asm__ __volatile__(                                 \
      "csrr\tt0,vl\n"                                    \
      "csrr\tt1,vtype\n"                                 \
      "vsetvli\tx0,%0,e8,m8\n"                           \
      "vle.v\tv8,(%1)\n"                                 \
      "vsetvl\tx0,t0,t1\n"                               \
      ::"r"(tailing_bytes), "r"(vd_offs)                 \
      :"t0", "t1"                                        \
   );

/* Segment unit-stride load */
#define RVV0p7_Seg_Store_GuestState(insn, nf, vm)     \
   RVV0p7_Seg_LoadStore_GuestState(insn, nf, vm, vd)

#define RVV0p7_Seg_Unit_Stride_Load_Memory(insn, vm)  \
   RVV0p7_Seg_PreLoad_Init                            \
   RVV_Unit_Stride_Load_Store_Memory(insn, vm)

#undef  RVV_Load_Memory
#undef  RVV_Store_GuestState
#define RVV_Load_Memory        RVV0p7_Seg_Unit_Stride_Load_Memory
#define RVV_Store_GuestState   RVV0p7_Seg_Store_GuestState
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, b,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, h,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, w,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, bu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, hu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, wu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, e,  vse)

/* Segment unit-stride store */
#define RVV0p7_Seg_USX_Load_GuestState(insn, nf, vm) \
   RVV0p7_Seg_LoadStore_GuestState(vle, nf, vm, vs)

#undef  RVV_Load_GuestState
#undef  RVV_Store_Memory
#define RVV_Load_GuestState    RVV0p7_Seg_USX_Load_GuestState
#define RVV_Store_Memory       RVV_Unit_Stride_Load_Store_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, b, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, h, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, w, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, e, vle)

/* Segment strided load */
#define RVV0p7_Seg_Strided_Load_Memory(insn, vm)  \
   RVV0p7_Seg_PreLoad_Init                        \
   RVV_Strided_Load_Store_Memory(insn, vm)

#undef  RVV_Load_Memory
#define RVV_Load_Memory        RVV0p7_Seg_Strided_Load_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, b,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, h,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, w,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, bu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, hu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, wu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, e,  vse)

/* Segment strided store */
#undef  RVV_Store_Memory
#define RVV_Store_Memory       RVV_Strided_Load_Store_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, b, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, h, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, w, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, e, vle)

/* Segment indexed load */
#define RVV0p7_Seg_Indexed_Load_Memory(insn, vm) \
   RVV0p7_Seg_PreLoad_Init                       \
   RVV0p7_Indexed_Load_Store_Memory(insn, vm)

#undef  RVV_Load_Memory
#define RVV_Load_Memory        RVV0p7_Seg_Indexed_Load_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, b,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, h,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, w,  vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, bu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, hu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, wu, vse)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlxseg, DIRTY_VLOAD_BODY, e,  vse)

/* Segment indexed store */
#undef  RVV_Store_Memory
#define RVV_Store_Memory       RVV0p7_Indexed_Load_Store_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsxseg, DIRTY_VSTORE_BODY, b, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsxseg, DIRTY_VSTORE_BODY, h, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsxseg, DIRTY_VSTORE_BODY, w, vle)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsxseg, DIRTY_VSTORE_BODY, e, vle)

#pragma pop_macro("RVV_Load_GuestState")
#pragma pop_macro("RVV_Store_GuestState")
#pragma pop_macro("RVV_Load_Memory")
#pragma pop_macro("RVV_Store_Memory")

#pragma pop_macro("RVV_Pre")
#pragma pop_macro("RVV_Post")
