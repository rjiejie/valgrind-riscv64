
/*---------------------------------------------------------------*/
/*--- OPI function definitions                                ---*/
/*---------------------------------------------------------------*/

RVV_FT_DEF(vadd,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsub,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vrsub,  NIL,         BinopOPIVX,  BinopOPIVI)

RVV_FT_DEF(vwaddu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwaddu, BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwsubu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwsubu, BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwadd,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwadd,  BinopOPIWV, BinopOPIWX, NIL)
RVV_FT_DEF(vwsub,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwsub,  BinopOPIWV, BinopOPIWX, NIL)

RVV_FT_DEF(vadc,   BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)
RVV_FT_DEF(vsbc,   BinopOPIVVM, BinopOPIVXM, NIL)
#pragma push_macro("RVV_BinopVVM_M")
#pragma push_macro("RVV_BinopVXM_M")
#pragma push_macro("RVV_BinopVIM_M")
#pragma push_macro("RVV_BinopVVM")
#pragma push_macro("RVV_BinopVXM")
#pragma push_macro("RVV_BinopVIM")
#pragma push_macro("VInsnVVM")
#pragma push_macro("VInsnVXM")
#undef  VInsnVVM
#undef  VInsnVXM
#define VInsnVVM(insn) #insn
#define VInsnVXM       VInsnVVM
#undef  RVV_BinopVVM
#undef  RVV_BinopVXM
#undef  RVV_BinopVIM
#define RVV_BinopVVM(insn, vd, vs2, vs1) RVV_BinopVV_Tpl(insn".vv", vd, vs2, vs1, ,)
#define RVV_BinopVXM(insn, vd, vs2, vs1) RVV_BinopVX_Tpl(insn".vx", vd, vs2, vs1, , )
#define RVV_BinopVIM(insn, vd, vs2, vs1) RVV_BinopVI_Tpl(insn".vx", vd, vs2, vs1, , )
#undef  RVV_BinopVVM_M
#undef  RVV_BinopVXM_M
#undef  RVV_BinopVIM_M
#define RVV_BinopVVM_M(insn, vd, vs2, vs1) RVV_BinopVV_Tpl(insn".vvm", vd, vs2, vs1, RVV_Mask(), ",v0")
#define RVV_BinopVXM_M(insn, vd, vs2, vs1) RVV_BinopVX_Tpl(insn".vxm", vd, vs2, vs1, RVV_Mask(), ",v0")
#define RVV_BinopVIM_M(insn, vd, vs2, vs1) RVV_BinopVI_Tpl(insn".vxm", vd, vs2, vs1, RVV_Mask(), ",v0")
RVV_FT_DEF(vmadc,  BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)
RVV_FT_DEF(vmsbc,  BinopOPIVVM, BinopOPIVXM, NIL)
#pragma pop_macro("VInsnVVM")
#pragma pop_macro("VInsnVXM")
#pragma pop_macro("RVV_BinopVVM")
#pragma pop_macro("RVV_BinopVXM")
#pragma pop_macro("RVV_BinopVIM")
#pragma pop_macro("RVV_BinopVVM_M")
#pragma pop_macro("RVV_BinopVXM_M")
#pragma pop_macro("RVV_BinopVIM_M")

RVV_FT_DEF(vand,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vor,    BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vxor,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsll,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsrl,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vsra,   BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vnsrl,  BinopOPIWV,  BinopOPIWX,  BinopOPIWI)
RVV_FT_DEF(vnsra,  BinopOPIWV,  BinopOPIWX,  BinopOPIWI)

RVV_FT_DEF(vmseq,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsne,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsleu, BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsle,  BinopOPIVV,  BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsltu, BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmslt,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmsgtu, NIL,         BinopOPIVX,  BinopOPIVI)
RVV_FT_DEF(vmsgt,  NIL,         BinopOPIVX,  BinopOPIVI)

RVV_FT_DEF(vminu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmin,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmaxu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmax,   BinopOPIVV,  BinopOPIVX,  NIL)

RVV_FT_DEF(vmul,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulh,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulhu, BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vmulhsu,BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vdivu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vdiv,   BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vremu,  BinopOPIVV,  BinopOPIVX,  NIL)
RVV_FT_DEF(vrem,   BinopOPIVV,  BinopOPIVX,  NIL)

RVV_FT_DEF(vwmul,  BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwmulu, BinopOPIVV, BinopOPIVX, NIL)
RVV_FT_DEF(vwmulsu,BinopOPIVV, BinopOPIVX, NIL)

RVV_FT_DEF(vmacc,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vnmsac, BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vmadd,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vnmsub, BinopOPIVV2, BinopOPIVX2, NIL)

RVV_FT_DEF(vwmaccu,  BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmacc,   BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmaccsu, BinopOPIVV2, BinopOPIVX2, NIL)
RVV_FT_DEF(vwmaccus, NIL,         BinopOPIVX2, NIL)

RVV_FT_DEF(vmerge, BinopOPIVVM, BinopOPIVXM, BinopOPIVIM)

RVV_FT_DEF(vslideup,   NIL,         BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vslidedown, NIL,         BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vslide1up,  NIL,         BinopOPIVX, NIL)
RVV_FT_DEF(vslide1down,NIL,         BinopOPIVX, NIL)
RVV_FT_DEF(vrgather,   BinopOPIVV,  BinopOPIVX, BinopOPIVI)
RVV_FT_DEF(vrgatherei16,   BinopOPIVV,  NIL, NIL)

RVV_FT_DEF(vredsum,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmaxu,  BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmax,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredminu,  BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredmin,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredand,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredor,    BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vredxor,   BinopOPIVS,   NIL, NIL)
RVV_FT_DEF(vwredsumu, BinopOPIVS, NIL, NIL)
RVV_FT_DEF(vwredsum,  BinopOPIVS, NIL, NIL)

#pragma push_macro("RVV_Pre")
#pragma push_macro("RVV_Post")
#undef  RVV_Pre
#undef  RVV_Post
#define RVV_Pre      RVV_PushXSAT
#define RVV_Post     RVV_PopXSAT
RVV_FT_DEF(vsaddu,  BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vsadd,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vssubu,  BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vssub,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vaaddu,  BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vaadd,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vasubu,  BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vasub,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vsmul,   BinopSATVV,  BinopSATVX,  NIL)
RVV_FT_DEF(vssrl,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vssra,   BinopSATVV,  BinopSATVX,  BinopSATVI)
RVV_FT_DEF(vnclipu, BinopSATWV,  BinopSATWX,  BinopSATWI)
RVV_FT_DEF(vnclip,  BinopSATWV,  BinopSATWX,  BinopSATWI)
#pragma pop_macro("RVV_Pre")
#pragma pop_macro("RVV_Post")

#pragma push_macro("RVV_BinopVV_M")
#undef  RVV_BinopVV_M
#define RVV_BinopVV_M RVV_BinopVV
RVV_FT_DEF(vmand,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmnand,   BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmandnot, BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmxor,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmor,     BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmnor,    BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmornot,  BinopOPIMM, NIL, NIL)
RVV_FT_DEF(vmxnor,   BinopOPIMM, NIL, NIL)
#pragma pop_macro("RVV_BinopVV_M")

#pragma push_macro("VInsnVV")
#pragma push_macro("RVV_BinopVV_M")
#undef  VInsnVV
#undef  RVV_BinopVV_M
#define VInsnVV(insn) #insn
#define RVV_BinopVV_M RVV_BinopVV
RVV_BinopOPI_FT_VAR_T(vcompress, vcompress.vm, VV, VV)
#pragma pop_macro("VInsnVV")
#pragma pop_macro("RVV_BinopVV_M")

RVV_FT_DEF(vmsbf,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(vmsif,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(vmsof,    UnopOPIM, NIL, NIL)
RVV_FT_DEF(viota,    UnopOPIM, NIL, NIL)

#pragma push_macro("RVV_UnopV_M")
#undef  RVV_UnopV_M
#define RVV_UnopV_M RVV_UnopV
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, V, V)
#pragma pop_macro("RVV_UnopV_M")
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, X, X)
RVV_UnopOPI_FT_VAR_T(vmv, vmv.v, I, I)

RVV_UnopOPI_FT_VAR_T(vmvs, vmv.s, X, X)

#pragma push_macro("VInsnV")
#undef  VInsnV
#define VInsnV(insn) #insn
RVV_UnopOPI_FT_VAR_T(vzextf2, vzext.vf2, V, V)
RVV_UnopOPI_FT_VAR_T(vzextf4, vzext.vf4, V, V)
RVV_UnopOPI_FT_VAR_T(vzextf8, vzext.vf8, V, V)
RVV_UnopOPI_FT_VAR_T(vsextf2, vsext.vf2, V, V)
RVV_UnopOPI_FT_VAR_T(vsextf4, vsext.vf4, V, V)
RVV_UnopOPI_FT_VAR_T(vsextf8, vsext.vf8, V, V)
#pragma pop_macro("VInsnV")

#pragma push_macro("RVV_UnopV_M")
#undef  RVV_UnopV_M
#define RVV_UnopV_M RVV_UnopV
RVV_FT_DEF(vmv1r, UnopOPIV, NIL, NIL)
RVV_FT_DEF(vmv2r, UnopOPIV, NIL, NIL)
RVV_FT_DEF(vmv4r, UnopOPIV, NIL, NIL)
RVV_FT_DEF(vmv8r, UnopOPIV, NIL, NIL)
#pragma pop_macro("RVV_UnopV_M")

#pragma push_macro("RVV_WholeST")
#undef  RVV_WholeST
#define RVV_WholeST
RVV_UnopOPI_FT_VAR(vcpop, M, V3)
RVV_UnopOPI_FT_VAR(vfirst, M, V3)

#pragma push_macro("VInsnV")
#pragma push_macro("RVV_UnopV3_M")
#undef  VInsnV
#undef  RVV_UnopV3_M
#define VInsnV(insn) #insn
#define RVV_UnopV3_M RVV_UnopV3

RVV_UnopOPI_FT_VAR_T(vmvx, vmv.x.s, V, V3)

#pragma push_macro("RVV_BinopXIF_iTpl3")
#undef  RVV_BinopXIF_iTpl3
#define RVV_BinopXIF_iTpl3(insn, treg, mreg)\
   (void)vstart;\
   __asm__ __volatile__(insn "\tft0,v16" treg mreg "\n\t"   \
                        "fmv.x.d\t%0,ft0\n\t"               \
                        :"=r"(ret)::"ft0");
RVV_UnopOPF_FT_VAR_T(vfmv, vfmv.f.s, V, V3)
#pragma pop_macro("RVV_BinopXIF_iTpl3")

#pragma pop_macro("VInsnV")
#pragma pop_macro("RVV_UnopV3_M")

#pragma pop_macro("RVV_WholeST")

/*---------------------------------------------------------------*/
/*--- OPF function definitions                                ---*/
/*---------------------------------------------------------------*/

#define RVV_FFT_DEF(insn, vv, vf) RVV_FT_DEF(insn, vv, vf, NIL)

#pragma push_macro("RVV_Pre")
#pragma push_macro("RVV_Post")
#undef  RVV_Pre
#undef  RVV_Post
#define RVV_Pre      RVV_PushFCSR
#define RVV_Post     RVV_PopFCSR

RVV_FFT_DEF(vfadd,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsub,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfrsub,  NIL,         BinopOPFVF)
RVV_FFT_DEF(vfmul,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfdiv,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfrdiv,  NIL,         BinopOPFVF)
RVV_FFT_DEF(vfmin,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfmax,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnj,  BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnjn, BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vfsgnjx, BinopOPFVV,  BinopOPFVF)

RVV_FFT_DEF(vfwadd,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwsub,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwmul,  BinopOPFVV, BinopOPFVF)
RVV_FFT_DEF(vfwadd,  BinopOPFWV, BinopOPFWF)
RVV_FFT_DEF(vfwsub,  BinopOPFWV, BinopOPFWF)

RVV_FFT_DEF(vfmacc,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmacc, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmsac,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmsac, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmadd,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmadd, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfmsub,  BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfnmsub, BinopOPFVV2, BinopOPFVF2)
RVV_FFT_DEF(vfwmacc, BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwnmacc,BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwmsac, BinopOPFVV2,BinopOPFVF2)
RVV_FFT_DEF(vfwnmsac,BinopOPFVV2,BinopOPFVF2)

RVV_FFT_DEF(vmfeq,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfne,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmflt,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfle,   BinopOPFVV,  BinopOPFVF)
RVV_FFT_DEF(vmfgt,   NIL,         BinopOPFVF)
RVV_FFT_DEF(vmfge,   NIL,         BinopOPFVF)

RVV_FFT_DEF(vfredosum,  BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredusum,  BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredmax,   BinopOPFVS,    NIL)
RVV_FFT_DEF(vfredmin,   BinopOPFVS,    NIL)
RVV_FFT_DEF(vfwredosum, BinopOPFVS,  NIL)
RVV_FFT_DEF(vfwredusum, BinopOPFVS,  NIL)

RVV_UnopOPFV_FT(vfsqrt,         vfsqrt)
RVV_UnopOPFV_FT(vfrsqrt7,       vfrsqrt7)
RVV_UnopOPFV_FT(vfrec7,         vfrec7)
RVV_UnopOPFV_FT(vfclass,        vfclass)
RVV_UnopOPFV_FT(vfcvt_xu_f,     vfcvt.xu.f)
RVV_UnopOPFV_FT(vfcvt_x_f,      vfcvt.x.f)
RVV_UnopOPFV_FT(vfcvt_f_xu,     vfcvt.f.xu)
RVV_UnopOPFV_FT(vfcvt_f_x,      vfcvt.f.x)
RVV_UnopOPFV_FT(vfcvt_rtz_xu_f, vfcvt.rtz.xu.f)
RVV_UnopOPFV_FT(vfcvt_rtz_x_f,  vfcvt.rtz.x.f)
RVV_UnopOPFV_FT(vfwcvt_xu_f,    vfwcvt.xu.f)
RVV_UnopOPFV_FT(vfwcvt_x_f,     vfwcvt.x.f)
RVV_UnopOPFV_FT(vfwcvt_f_xu,    vfwcvt.f.xu)
RVV_UnopOPFV_FT(vfwcvt_f_x,     vfwcvt.f.x)
RVV_UnopOPFV_FT(vfwcvt_f_f,     vfwcvt.f.f)
RVV_UnopOPFV_FT(vfwcvt_rtz_xu_f,vfwcvt.rtz.xu.f)
RVV_UnopOPFV_FT(vfwcvt_rtz_x_f, vfwcvt.rtz.x.f)
RVV_UnopOPFW_FT(vfncvt_xu_f,    vfncvt.xu.f)
RVV_UnopOPFW_FT(vfncvt_x_f,     vfncvt.x.f)
RVV_UnopOPFW_FT(vfncvt_f_xu,    vfncvt.f.xu)
RVV_UnopOPFW_FT(vfncvt_f_x,     vfncvt.f.x)
RVV_UnopOPFW_FT(vfncvt_f_f,     vfncvt.f.f)
RVV_UnopOPFW_FT(vfncvt_rod_f_f, vfncvt.rod.f.f)
RVV_UnopOPFW_FT(vfncvt_rtz_xu_f,vfncvt.rtz.xu.f)
RVV_UnopOPFW_FT(vfncvt_rtz_x_f, vfncvt.rtz.x.f)

RVV_UnopOPF_FT_VAR_T(vfmerge, vfmv.v, F, F)

RVV_FFT_DEF(vfslide1up,   NIL, BinopOPFVF)
RVV_FFT_DEF(vfslide1down, NIL, BinopOPFVF)

#pragma push_macro("VInsnVF")
#undef  VInsnVF
#define VInsnVF(insn) #insn
RVV_BinopOPF_FT_VAR_T(vfmerge, vfmerge.vfm, VF, VFM)
#pragma pop_macro("VInsnVF")

RVV_UnopOPF_FT_VAR_T(vfmvs, vfmv.s, F, F)

/* Change name space from RVV0p7 to RVV */
#undef  HELPER_NAME
#define HELPER_NAME(insn, vm)  RVV_VLdst_##insn##vm

#pragma push_macro("RVV_Load_GuestState")
#pragma push_macro("RVV_Store_GuestState")
#pragma push_macro("RVV_Load_Memory")
#pragma push_macro("RVV_Store_Memory")

#undef  RVV_Load_Memory
#undef  RVV_Store_GuestState
#define RVV_Load_Memory       RVV_Unit_Stride_Load_Store_Memory
#define RVV_Store_GuestState  RVV_USX_Store_GuestState
RVV_VLdst(vle8,  vse8,  DIRTY_VLOAD_BODY)
RVV_VLdst(vle16, vse16, DIRTY_VLOAD_BODY)
RVV_VLdst(vle32, vse32, DIRTY_VLOAD_BODY)
RVV_VLdst(vle64, vse64, DIRTY_VLOAD_BODY)
RVV_VLdst(vle8ff,  vse64, DIRTY_VLOAD_BODY)
RVV_VLdst(vle16ff, vse64, DIRTY_VLOAD_BODY)
RVV_VLdst(vle32ff, vse64, DIRTY_VLOAD_BODY)
RVV_VLdst(vle64ff, vse64, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vlm, vsm, DIRTY_VLOAD_BODY)

#undef  RVV_Load_GuestState
#undef  RVV_Store_Memory
#define RVV_Load_GuestState  RVV_USX_Load_GuestState
#define RVV_Store_Memory     RVV_Unit_Stride_Load_Store_Memory
RVV_VLdst(vse8,  vle8,  DIRTY_VSTORE_BODY)
RVV_VLdst(vse16, vle16, DIRTY_VSTORE_BODY)
RVV_VLdst(vse32, vle32, DIRTY_VSTORE_BODY)
RVV_VLdst(vse64, vle64, DIRTY_VSTORE_BODY)
RVV_VWholeLdst(vsm, vlm, DIRTY_VLOAD_BODY)

#undef  RVV_Load_Memory
#define RVV_Load_Memory     RVV_Strided_Load_Store_Memory
RVV_VSXLdst(vlse8,  vse8,  DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlse16, vse16, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlse32, vse32, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vlse64, vse64, DIRTY_VLOAD_BODY)

#undef  RVV_Store_Memory
#define RVV_Store_Memory    RVV_Strided_Load_Store_Memory
RVV_VSXLdst(vsse8,  vle8,  DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsse16, vle16, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsse32, vle32, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsse64, vle64, DIRTY_VSTORE_BODY)

/* Indexed register load/store */
#define RVV_Index_Load_Store_GuestState(ldst_macro, insn_ldst, nf, vm) \
switch ((st->guest_vtype >> 3) & 0x07) {                               \
   case 0:                                                             \
      ldst_macro(insn_ldst##8, nf, vm);                                \
      break;                                                           \
   case 1:                                                             \
      ldst_macro(insn_ldst##16, nf, vm);                               \
      break;                                                           \
   case 2:                                                             \
      ldst_macro(insn_ldst##32, nf, vm);                               \
      break;                                                           \
   case 3:                                                             \
      ldst_macro(insn_ldst##64, nf, vm);                               \
      break;                                                           \
   default:                                                            \
      vassert(0);                                                      \
}

#define RVV_Index_Store_GuestState(insn_ldst, nf, vm)   \
RVV_Index_Load_Store_GuestState(RVV_USX_Store_GuestState, insn_ldst, nf, vm)
#define RVV_Index_Load_GuestState(insn_ldst, nf, vm)   \
RVV_Index_Load_Store_GuestState(RVV_USX_Load_GuestState, insn_ldst, nf, vm)

#undef  RVV_Store_GuestState
#define RVV_Store_GuestState  RVV_Index_Store_GuestState
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)       RVV_Indexed_Load_Store_Memory(insn, vle8, vm)
RVV_VSXLdst(vluxei8,  vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vloxei8,  vse, DIRTY_VLOAD_BODY)
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)       RVV_Indexed_Load_Store_Memory(insn, vle16, vm)
RVV_VSXLdst(vluxei16, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vloxei16, vse, DIRTY_VLOAD_BODY)
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)       RVV_Indexed_Load_Store_Memory(insn, vle32, vm)
RVV_VSXLdst(vluxei32, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vloxei32, vse, DIRTY_VLOAD_BODY)
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)       RVV_Indexed_Load_Store_Memory(insn, vle64, vm)
RVV_VSXLdst(vluxei64, vse, DIRTY_VLOAD_BODY)
RVV_VSXLdst(vloxei64, vse, DIRTY_VLOAD_BODY)

#undef  RVV_Load_GuestState
#define RVV_Load_GuestState  RVV_Index_Load_GuestState
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)      RVV_Indexed_Load_Store_Memory(insn, vle8, vm)
RVV_VSXLdst(vsuxei8,  vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsoxei8,  vle, DIRTY_VSTORE_BODY)
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)      RVV_Indexed_Load_Store_Memory(insn, vle16, vm)
RVV_VSXLdst(vsuxei16, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsoxei16, vle, DIRTY_VSTORE_BODY)
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)      RVV_Indexed_Load_Store_Memory(insn, vle32, vm)
RVV_VSXLdst(vsuxei32, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsoxei32, vle, DIRTY_VSTORE_BODY)
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)      RVV_Indexed_Load_Store_Memory(insn, vle64, vm)
RVV_VSXLdst(vsuxei64, vle, DIRTY_VSTORE_BODY)
RVV_VSXLdst(vsoxei64, vle, DIRTY_VSTORE_BODY)

/* Segment load/store */

/* Initialize host v8 reg vectors all in once. It is done by
   (1) get the marginal bytes length between vd and v31 in guest state
       to the variable trailing_bytes
   (2) set the vl such that vl = min(trailing_bytes, 8 * host_VLENB)
   (3) perform the load to init host v8 (possibly including v9 - 15)
   After these three steps, host v8 is initialized by guest vd.
   The active VL is returned, but can be optimized out if unused.
*/
#define RVV_Seg_PreLoadStore_Init(vsd)                  \
   /* Initialize host vec regs using guest vec regs. */ \
   /* Use maximal available bytes. */                   \
   ULong __attribute__((unused)) act_vl = 0;            \
   ULong __attribute__((unused)) prev_vl;               \
   ULong __attribute__((unused)) prev_vtype;            \
   ULong tailing_bytes = mask + (host_VLENB << 5) - v;  \
   __asm__ __volatile__(                                \
      "csrr\t%0,vl\n"                                   \
      "csrr\t%1,vtype\n"                                \
      "vsetvli\t%2,%3,e8,m8\n"                          \
      "vle8.v\tv8,(%4)\n"                               \
      "vsetvl\tx0,%0,%1\n"                              \
      :"=r"(prev_vl), "=r"(prev_vtype), "=r"(act_vl)    \
      :"r"(tailing_bytes), "r"(vsd##_offs)              \
      :                                                 \
   );

/* RVV_Seg_Unit_Stride_Load_Memory and RVV_Seg_USX_Store_Guest_State
   should always be paired due to the shared variable act_vl. */
#define RVV_Seg_Unit_Stride_Load_Memory(insn, vm) \
   RVV_Seg_PreLoadStore_Init(vd)                  \
   RVV_Unit_Stride_Load_Store_Memory(insn, vm)

#define RVV_Seg_USX_Store_GuestState(insn, nf, vm) \
   __asm__ __volatile__ (                          \
      "vsetvli\tx0,%0,e8,m8\n"                     \
      "vse8.v\tv8,(%1)\t\n"                        \
      "vsetvl\tx0,%2,%3\n"                         \
      ::"r"(act_vl), "r" (vd_offs),                \
        "r"(prev_vl), "r"(prev_vtype)              \
      :);

#undef  RVV_Load_Memory
#undef  RVV_Store_GuestState
#define RVV_Load_Memory       RVV_Seg_Unit_Stride_Load_Memory
#define RVV_Store_GuestState  RVV_Seg_USX_Store_GuestState
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, e8,  )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, e16, )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, e32, )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vlseg, DIRTY_VLOAD_BODY, e64, )

#define RVV_Seg_Strided_Load_Memory(insn, vm) \
   RVV_Seg_PreLoadStore_Init(vd)              \
   RVV_Strided_Load_Store_Memory(insn, vm)

#undef  RVV_Load_Memory
#define RVV_Load_Memory       RVV_Seg_Strided_Load_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, e8,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, e16, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, e32, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vlsseg, DIRTY_VLOAD_BODY, e64, )

#define RVV_Seg_Indexed_Load_Memory(insn, insn_idx, vm) \
   RVV_Seg_PreLoadStore_Init(vd)                        \
   RVV_Indexed_Load_Store_Memory(insn, insn_idx, vm)

#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)     RVV_Seg_Indexed_Load_Memory(insn, vle8,  vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vluxseg, DIRTY_VLOAD_BODY, ei8,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vloxseg, DIRTY_VLOAD_BODY, ei8,  )
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)     RVV_Seg_Indexed_Load_Memory(insn, vle16, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vluxseg, DIRTY_VLOAD_BODY, ei16, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vloxseg, DIRTY_VLOAD_BODY, ei16, )
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)     RVV_Seg_Indexed_Load_Memory(insn, vle32, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vluxseg, DIRTY_VLOAD_BODY, ei32, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vloxseg, DIRTY_VLOAD_BODY, ei32, )
#undef  RVV_Load_Memory
#define RVV_Load_Memory(insn, vm)     RVV_Seg_Indexed_Load_Memory(insn, vle64, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vluxseg, DIRTY_VLOAD_BODY, ei64, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vloxseg, DIRTY_VLOAD_BODY, ei64, )

#undef  RVV_Load_GuestState
#undef  RVV_Store_Memory
#define RVV_Load_GuestState(insn, nf, vm)   RVV_Seg_PreLoadStore_Init(vs)
#define RVV_Store_Memory                    RVV_Unit_Stride_Load_Store_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, e8,  )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, e16, )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, e32, )
RVV_VSEG_NF_DEFS(RVV_VSEGLdst, vsseg, DIRTY_VSTORE_BODY, e64, )

#undef  RVV_Store_Memory
#define RVV_Store_Memory              RVV_Strided_Load_Store_Memory
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, e8,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, e16, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, e32, )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vssseg, DIRTY_VSTORE_BODY, e64, )

#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)    RVV_Indexed_Load_Store_Memory(insn, vle8, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsuxseg, DIRTY_VSTORE_BODY, ei8,   )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsoxseg, DIRTY_VSTORE_BODY, ei8,   )
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)    RVV_Indexed_Load_Store_Memory(insn, vle16, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsuxseg, DIRTY_VSTORE_BODY, ei16,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsoxseg, DIRTY_VSTORE_BODY, ei16,  )
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)    RVV_Indexed_Load_Store_Memory(insn, vle32, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsuxseg, DIRTY_VSTORE_BODY, ei32,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsoxseg, DIRTY_VSTORE_BODY, ei32,  )
#undef  RVV_Store_Memory
#define RVV_Store_Memory(insn, vm)    RVV_Indexed_Load_Store_Memory(insn, vle64, vm)
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsuxseg, DIRTY_VSTORE_BODY, ei64,  )
RVV_VSEG_NF_DEFS(RVV_VSEGSXLdst, vsoxseg, DIRTY_VSTORE_BODY, ei64,  )

/* Whole register load/store */
#undef  RVV_Load_Memory
#undef  RVV_Store_GuestState
#define RVV_Load_Memory       RVV_Unit_Stride_Load_Store_Memory
#define RVV_Store_GuestState  RVV_USX_Store_GuestState
RVV_VWholeLdst(vl1re8,  vs1r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl1re16, vs1r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl1re32, vs1r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl1re64, vs1r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl2re8,  vs2r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl2re16, vs2r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl2re32, vs2r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl2re64, vs2r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl4re8,  vs4r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl4re16, vs4r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl4re32, vs4r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl4re64, vs4r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl8re8,  vs8r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl8re16, vs8r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl8re32, vs8r, DIRTY_VLOAD_BODY)
RVV_VWholeLdst(vl8re64, vs8r, DIRTY_VLOAD_BODY)

#undef  RVV_Store_Memory
#undef  RVV_Load_GuestState
#define RVV_Store_Memory     RVV_Unit_Stride_Load_Store_Memory
#define RVV_Load_GuestState  RVV_USX_Load_GuestState
RVV_VWholeLdst(vs1r, vl1re8, DIRTY_VSTORE_BODY)
RVV_VWholeLdst(vs2r, vl2re8, DIRTY_VSTORE_BODY)
RVV_VWholeLdst(vs4r, vl4re8, DIRTY_VSTORE_BODY)
RVV_VWholeLdst(vs8r, vl8re8, DIRTY_VSTORE_BODY)

#pragma pop_macro("RVV_Load_GuestState")
#pragma pop_macro("RVV_Store_GuestState")
#pragma pop_macro("RVV_Load_Memory")
#pragma pop_macro("RVV_Store_Memory")

#pragma pop_macro("RVV_Pre")
#pragma pop_macro("RVV_Post")
